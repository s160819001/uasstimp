{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nexport default function rgbHex(red, green, blue, alpha) {\n  var isPercent = (red + (alpha || '')).toString().includes('%');\n\n  if (typeof red === 'string') {\n    var _red$match$map = red.match(/(0?\\.?\\d{1,3})%?\\b/g).map(function (component) {\n      return Number(component);\n    });\n\n    var _red$match$map2 = _slicedToArray(_red$match$map, 4);\n\n    red = _red$match$map2[0];\n    green = _red$match$map2[1];\n    blue = _red$match$map2[2];\n    alpha = _red$match$map2[3];\n  } else if (alpha !== undefined) {\n    alpha = Number.parseFloat(alpha);\n  }\n\n  if (typeof red !== 'number' || typeof green !== 'number' || typeof blue !== 'number' || red > 255 || green > 255 || blue > 255) {\n    throw new TypeError('Expected three numbers below 256');\n  }\n\n  if (typeof alpha === 'number') {\n    if (!isPercent && alpha >= 0 && alpha <= 1) {\n      alpha = Math.round(255 * alpha);\n    } else if (isPercent && alpha >= 0 && alpha <= 100) {\n      alpha = Math.round(255 * alpha / 100);\n    } else {\n      throw new TypeError(\"Expected alpha value (\" + alpha + \") as a fraction or percentage\");\n    }\n\n    alpha = (alpha | 1 << 8).toString(16).slice(1);\n  } else {\n    alpha = '';\n  }\n\n  return (blue | green << 8 | red << 16 | 1 << 24).toString(16).slice(1) + alpha;\n}","map":{"version":3,"names":["rgbHex","red","green","blue","alpha","isPercent","toString","includes","match","map","component","Number","undefined","parseFloat","TypeError","Math","round","slice"],"sources":["/Users/davidkurniawan/Library/Mobile Documents/com~apple~CloudDocs/Documents/Semester 7/STMP/uts/fix/utsstimp/node_modules/rgb-hex/index.js"],"sourcesContent":["export default function rgbHex(red, green, blue, alpha) {\n\tconst isPercent = (red + (alpha || '')).toString().includes('%');\n\n\tif (typeof red === 'string') {\n\t\t[red, green, blue, alpha] = red.match(/(0?\\.?\\d{1,3})%?\\b/g).map(component => Number(component));\n\t} else if (alpha !== undefined) {\n\t\talpha = Number.parseFloat(alpha);\n\t}\n\n\tif (typeof red !== 'number' ||\n\t\ttypeof green !== 'number' ||\n\t\ttypeof blue !== 'number' ||\n\t\tred > 255 ||\n\t\tgreen > 255 ||\n\t\tblue > 255\n\t) {\n\t\tthrow new TypeError('Expected three numbers below 256');\n\t}\n\n\tif (typeof alpha === 'number') {\n\t\tif (!isPercent && alpha >= 0 && alpha <= 1) {\n\t\t\talpha = Math.round(255 * alpha);\n\t\t} else if (isPercent && alpha >= 0 && alpha <= 100) {\n\t\t\talpha = Math.round(255 * alpha / 100);\n\t\t} else {\n\t\t\tthrow new TypeError(`Expected alpha value (${alpha}) as a fraction or percentage`);\n\t\t}\n\n\t\talpha = (alpha | 1 << 8).toString(16).slice(1); // eslint-disable-line no-mixed-operators\n\t} else {\n\t\talpha = '';\n\t}\n\n\t// TODO: Remove this ignore comment.\n\t// eslint-disable-next-line no-mixed-operators\n\treturn ((blue | green << 8 | red << 16) | 1 << 24).toString(16).slice(1) + alpha;\n}\n"],"mappings":";AAAA,eAAe,SAASA,MAAT,CAAgBC,GAAhB,EAAqBC,KAArB,EAA4BC,IAA5B,EAAkCC,KAAlC,EAAyC;EACvD,IAAMC,SAAS,GAAG,CAACJ,GAAG,IAAIG,KAAK,IAAI,EAAb,CAAJ,EAAsBE,QAAtB,GAAiCC,QAAjC,CAA0C,GAA1C,CAAlB;;EAEA,IAAI,OAAON,GAAP,KAAe,QAAnB,EAA6B;IAAA,qBACAA,GAAG,CAACO,KAAJ,CAAU,qBAAV,EAAiCC,GAAjC,CAAqC,UAAAC,SAAS;MAAA,OAAIC,MAAM,CAACD,SAAD,CAAV;IAAA,CAA9C,CADA;;IAAA;;IAC3BT,GAD2B;IACtBC,KADsB;IACfC,IADe;IACTC,KADS;EAE5B,CAFD,MAEO,IAAIA,KAAK,KAAKQ,SAAd,EAAyB;IAC/BR,KAAK,GAAGO,MAAM,CAACE,UAAP,CAAkBT,KAAlB,CAAR;EACA;;EAED,IAAI,OAAOH,GAAP,KAAe,QAAf,IACH,OAAOC,KAAP,KAAiB,QADd,IAEH,OAAOC,IAAP,KAAgB,QAFb,IAGHF,GAAG,GAAG,GAHH,IAIHC,KAAK,GAAG,GAJL,IAKHC,IAAI,GAAG,GALR,EAME;IACD,MAAM,IAAIW,SAAJ,CAAc,kCAAd,CAAN;EACA;;EAED,IAAI,OAAOV,KAAP,KAAiB,QAArB,EAA+B;IAC9B,IAAI,CAACC,SAAD,IAAcD,KAAK,IAAI,CAAvB,IAA4BA,KAAK,IAAI,CAAzC,EAA4C;MAC3CA,KAAK,GAAGW,IAAI,CAACC,KAAL,CAAW,MAAMZ,KAAjB,CAAR;IACA,CAFD,MAEO,IAAIC,SAAS,IAAID,KAAK,IAAI,CAAtB,IAA2BA,KAAK,IAAI,GAAxC,EAA6C;MACnDA,KAAK,GAAGW,IAAI,CAACC,KAAL,CAAW,MAAMZ,KAAN,GAAc,GAAzB,CAAR;IACA,CAFM,MAEA;MACN,MAAM,IAAIU,SAAJ,4BAAuCV,KAAvC,mCAAN;IACA;;IAEDA,KAAK,GAAG,CAACA,KAAK,GAAG,KAAK,CAAd,EAAiBE,QAAjB,CAA0B,EAA1B,EAA8BW,KAA9B,CAAoC,CAApC,CAAR;EACA,CAVD,MAUO;IACNb,KAAK,GAAG,EAAR;EACA;;EAID,OAAO,CAAED,IAAI,GAAGD,KAAK,IAAI,CAAhB,GAAoBD,GAAG,IAAI,EAA5B,GAAkC,KAAK,EAAxC,EAA4CK,QAA5C,CAAqD,EAArD,EAAyDW,KAAzD,CAA+D,CAA/D,IAAoEb,KAA3E;AACA"},"metadata":{},"sourceType":"module"}