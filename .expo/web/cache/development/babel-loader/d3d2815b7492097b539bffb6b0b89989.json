{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"children\", \"enterTouchDelay\", \"leaveTouchDelay\", \"title\"];\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport * as React from 'react';\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { useInternalTheme } from \"../../core/theming\";\nimport { addEventListener } from \"../../utils/addEventListener\";\nimport Portal from \"../Portal/Portal\";\nimport Text from \"../Typography/Text\";\nimport { getTooltipPosition } from \"./utils\";\n\nvar Tooltip = function Tooltip(_ref) {\n  var children = _ref.children,\n      _ref$enterTouchDelay = _ref.enterTouchDelay,\n      enterTouchDelay = _ref$enterTouchDelay === void 0 ? 500 : _ref$enterTouchDelay,\n      _ref$leaveTouchDelay = _ref.leaveTouchDelay,\n      leaveTouchDelay = _ref$leaveTouchDelay === void 0 ? 1500 : _ref$leaveTouchDelay,\n      title = _ref.title,\n      rest = _objectWithoutProperties(_ref, _excluded);\n\n  var theme = useInternalTheme();\n\n  var _React$useState = React.useState(false),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      visible = _React$useState2[0],\n      setVisible = _React$useState2[1];\n\n  var _React$useState3 = React.useState({\n    children: {},\n    tooltip: {},\n    measured: false\n  }),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      measurement = _React$useState4[0],\n      setMeasurement = _React$useState4[1];\n\n  var showTooltipTimer = React.useRef();\n  var hideTooltipTimer = React.useRef();\n  var childrenWrapperRef = React.useRef();\n  React.useEffect(function () {\n    return function () {\n      if (showTooltipTimer.current) {\n        clearTimeout(showTooltipTimer.current);\n      }\n\n      if (hideTooltipTimer.current) {\n        clearTimeout(hideTooltipTimer.current);\n      }\n    };\n  }, []);\n  React.useEffect(function () {\n    var subscription = addEventListener(Dimensions, 'change', function () {\n      return setVisible(false);\n    });\n    return function () {\n      return subscription.remove();\n    };\n  }, []);\n\n  var handleOnLayout = function handleOnLayout(_ref2) {\n    var layout = _ref2.nativeEvent.layout;\n    childrenWrapperRef.current.measure(function (_x, _y, width, height, pageX, pageY) {\n      setMeasurement({\n        children: {\n          pageX: pageX,\n          pageY: pageY,\n          height: height,\n          width: width\n        },\n        tooltip: _objectSpread({}, layout),\n        measured: true\n      });\n    });\n  };\n\n  var handleTouchStart = function handleTouchStart() {\n    if (hideTooltipTimer.current) {\n      clearTimeout(hideTooltipTimer.current);\n    }\n\n    showTooltipTimer.current = setTimeout(function () {\n      return setVisible(true);\n    }, enterTouchDelay);\n  };\n\n  var handleTouchEnd = function handleTouchEnd() {\n    if (showTooltipTimer.current) {\n      clearTimeout(showTooltipTimer.current);\n    }\n\n    hideTooltipTimer.current = setTimeout(function () {\n      setVisible(false);\n      setMeasurement({\n        children: {},\n        tooltip: {},\n        measured: false\n      });\n    }, leaveTouchDelay);\n  };\n\n  return React.createElement(React.Fragment, null, visible && React.createElement(Portal, null, React.createElement(View, {\n    onLayout: handleOnLayout,\n    style: [styles.tooltip, _objectSpread(_objectSpread({\n      backgroundColor: theme.isV3 ? theme.colors.onSurface : theme.colors.tooltip\n    }, getTooltipPosition(measurement)), {}, {\n      borderRadius: theme.roundness\n    }, measurement.measured ? styles.visible : styles.hidden)],\n    testID: \"tooltip-container\"\n  }, React.createElement(Text, {\n    accessibilityLiveRegion: \"polite\",\n    numberOfLines: 1,\n    selectable: false,\n    variant: \"labelLarge\",\n    style: {\n      color: theme.colors.surface\n    }\n  }, title))), React.createElement(View, {\n    onTouchStart: handleTouchStart,\n    onTouchEnd: handleTouchEnd,\n    onTouchCancel: handleTouchEnd\n  }, React.cloneElement(children, _objectSpread(_objectSpread({}, rest), {}, {\n    ref: childrenWrapperRef\n  }))));\n};\n\nvar styles = StyleSheet.create({\n  tooltip: {\n    alignSelf: 'flex-start',\n    justifyContent: 'center',\n    paddingHorizontal: 16,\n    height: 32,\n    maxHeight: 32\n  },\n  visible: {\n    opacity: 1\n  },\n  hidden: {\n    opacity: 0\n  }\n});\nexport default Tooltip;","map":{"version":3,"mappings":"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","names":["React","useInternalTheme","addEventListener","Portal","Text","getTooltipPosition","Tooltip","children","_ref","enterTouchDelay","leaveTouchDelay","title","rest","theme","useState","visible","setVisible","tooltip","measured","measurement","setMeasurement","showTooltipTimer","useRef","hideTooltipTimer","childrenWrapperRef","useEffect","current","clearTimeout","subscription","Dimensions","remove","handleOnLayout","layout","_ref2","nativeEvent","measure","_x","_y","width","height","pageX","pageY","handleTouchStart","setTimeout","handleTouchEnd","View","onLayout","style","styles","backgroundColor","isV3","colors","onSurface","borderRadius","roundness","hidden","testID","accessibilityLiveRegion","numberOfLines","selectable","variant","color","surface","onTouchStart","onTouchEnd","onTouchCancel","cloneElement","ref","StyleSheet","create","alignSelf","justifyContent","paddingHorizontal","maxHeight","opacity"],"sources":["Tooltip.tsx"],"sourcesContent":["import * as React from 'react';\nimport { Dimensions, View, LayoutChangeEvent, StyleSheet } from 'react-native';\n\nimport { useInternalTheme } from '../../core/theming';\nimport { addEventListener } from '../../utils/addEventListener';\nimport Portal from '../Portal/Portal';\nimport Text from '../Typography/Text';\nimport { getTooltipPosition, Measurement } from './utils';\n\nexport type Props = {\n  /**\n   * Tooltip reference element. Needs to be able to hold a ref.\n   */\n  children: React.ReactElement;\n  /**\n   * The number of milliseconds a user must touch the element before showing the tooltip.\n   */\n  enterTouchDelay?: number;\n  /**\n   * The number of milliseconds after the user stops touching an element before hiding the tooltip.\n   */\n  leaveTouchDelay?: number;\n  /**\n   * Tooltip title\n   */\n  title: string;\n};\n\n/**\n * Tooltips display informative text when users hover over, focus on, or tap an element.\n *\n * Plain tooltips, when activated, display a text label identifying an element, such as a description of its function. Tooltips should include only short, descriptive text and avoid restating visible UI text.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img src=\"screenshots/TODO.png\" />\n *     <figcaption>TODO</figcaption>\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { IconButton, Tooltip } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <Tooltip title=\"Selected Camera\">\n *     <IconButton icon=\"camera\" selected size={24} onPress={() => {}} />\n *   </Tooltip>\n * );\n *\n * export default MyComponent;\n * ```\n */\nconst Tooltip = ({\n  children,\n  enterTouchDelay = 500,\n  leaveTouchDelay = 1500,\n  title,\n  ...rest\n}: Props) => {\n  const theme = useInternalTheme();\n  const [visible, setVisible] = React.useState(false);\n  const [measurement, setMeasurement] = React.useState({\n    children: {},\n    tooltip: {},\n    measured: false,\n  });\n  const showTooltipTimer = React.useRef<NodeJS.Timeout>();\n  const hideTooltipTimer = React.useRef<NodeJS.Timeout>();\n  const childrenWrapperRef = React.useRef() as React.MutableRefObject<View>;\n\n  React.useEffect(() => {\n    return () => {\n      if (showTooltipTimer.current) {\n        clearTimeout(showTooltipTimer.current);\n      }\n\n      if (hideTooltipTimer.current) {\n        clearTimeout(hideTooltipTimer.current);\n      }\n    };\n  }, []);\n\n  React.useEffect(() => {\n    const subscription = addEventListener(Dimensions, 'change', () =>\n      setVisible(false)\n    );\n\n    return () => subscription.remove();\n  }, []);\n\n  const handleOnLayout = ({ nativeEvent: { layout } }: LayoutChangeEvent) => {\n    childrenWrapperRef.current.measure(\n      (_x, _y, width, height, pageX, pageY) => {\n        setMeasurement({\n          children: { pageX, pageY, height, width },\n          tooltip: { ...layout },\n          measured: true,\n        });\n      }\n    );\n  };\n\n  const handleTouchStart = () => {\n    if (hideTooltipTimer.current) {\n      clearTimeout(hideTooltipTimer.current);\n    }\n\n    showTooltipTimer.current = setTimeout(\n      () => setVisible(true),\n      enterTouchDelay\n    ) as unknown as NodeJS.Timeout;\n  };\n\n  const handleTouchEnd = () => {\n    if (showTooltipTimer.current) {\n      clearTimeout(showTooltipTimer.current);\n    }\n\n    hideTooltipTimer.current = setTimeout(() => {\n      setVisible(false);\n      setMeasurement({ children: {}, tooltip: {}, measured: false });\n    }, leaveTouchDelay) as unknown as NodeJS.Timeout;\n  };\n\n  return (\n    <>\n      {visible && (\n        <Portal>\n          <View\n            onLayout={handleOnLayout}\n            style={[\n              styles.tooltip,\n              {\n                backgroundColor: theme.isV3\n                  ? theme.colors.onSurface\n                  : theme.colors.tooltip,\n                ...getTooltipPosition(measurement as Measurement),\n                borderRadius: theme.roundness,\n                ...(measurement.measured ? styles.visible : styles.hidden),\n              },\n            ]}\n            testID=\"tooltip-container\"\n          >\n            <Text\n              accessibilityLiveRegion=\"polite\"\n              numberOfLines={1}\n              selectable={false}\n              variant=\"labelLarge\"\n              style={{ color: theme.colors.surface }}\n            >\n              {title}\n            </Text>\n          </View>\n        </Portal>\n      )}\n      <View\n        onTouchStart={handleTouchStart}\n        onTouchEnd={handleTouchEnd}\n        onTouchCancel={handleTouchEnd}\n      >\n        {React.cloneElement(children, { ...rest, ref: childrenWrapperRef })}\n      </View>\n    </>\n  );\n};\n\nconst styles = StyleSheet.create({\n  tooltip: {\n    alignSelf: 'flex-start',\n    justifyContent: 'center',\n    paddingHorizontal: 16,\n    height: 32,\n    maxHeight: 32,\n  },\n  visible: {\n    opacity: 1,\n  },\n  hidden: {\n    opacity: 0,\n  },\n});\n\nexport default Tooltip;\n"]},"metadata":{},"sourceType":"module"}