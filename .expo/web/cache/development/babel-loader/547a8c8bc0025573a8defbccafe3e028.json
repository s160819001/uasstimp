{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport PropTypes from 'prop-types';\nimport { useState, useRef } from 'react';\nimport defaultMessages from \"./messages/defaultMessages\";\nimport defaultRules from \"./rules/defaultRules\";\n\nvar useValidation = function useValidation(props) {\n  var _props$state = props.state,\n      state = _props$state === void 0 ? {} : _props$state;\n  var deviceLocale = props.deviceLocale || 'en';\n  var baseRules = props.rules || defaultRules;\n  var messages = props.messages || defaultMessages;\n  var labels = props.labels || {};\n  var errors = useRef([]);\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      internalErrors = _useState2[0],\n      setInternalErrors = _useState2[1];\n\n  var validate = function validate(fields) {\n    _resetErrors();\n\n    for (var key of Object.keys(state)) {\n      var rules = fields[key];\n\n      if (rules) {\n        _checkRules(key, rules, state[key]);\n      }\n    }\n\n    return isFormValid();\n  };\n\n  var _checkRules = function _checkRules(fieldName, rules, value) {\n    if (!value && !rules.required) {\n      return;\n    }\n\n    for (var key of Object.keys(rules)) {\n      var isRuleFn = typeof baseRules[key] == 'function';\n      var isRegExp = baseRules[key] instanceof RegExp;\n\n      if (isRuleFn && !baseRules[key](rules[key], value) || isRegExp && !baseRules[key].test(value)) {\n        _addError(fieldName, key, rules[key], isRuleFn);\n      }\n    }\n  };\n\n  var _addError = function _addError(fieldName, rule, value, isFn) {\n    var name = labels[fieldName];\n    value = rule == 'minlength' ? value - 1 : value;\n    var errMsg = messages[deviceLocale][rule].replace('{0}', name || fieldName).replace('{1}', value);\n\n    var _errors$current$filte = errors.current.filter(function (err) {\n      return err.fieldName === fieldName;\n    }),\n        _errors$current$filte2 = _slicedToArray(_errors$current$filte, 1),\n        error = _errors$current$filte2[0];\n\n    if (error) {\n      var index = errors.current.indexOf(error);\n      error.messages.push(errMsg);\n      error.failedRules.push(rule);\n      errors.current[index] = error;\n    } else {\n      errors.current.push({\n        fieldName: fieldName,\n        failedRules: [rule],\n        messages: [errMsg]\n      });\n      setInternalErrors(errors.current);\n    }\n  };\n\n  var _resetErrors = function _resetErrors() {\n    errors.current = [];\n    setInternalErrors([]);\n  };\n\n  var isFieldInError = function isFieldInError(fieldName) {\n    return internalErrors.filter(function (err) {\n      return err.fieldName === fieldName;\n    }).length > 0;\n  };\n\n  var isFormValid = function isFormValid() {\n    var _errors$current;\n\n    return ((_errors$current = errors.current) == null ? void 0 : _errors$current.length) == 0;\n  };\n\n  var getFailedRules = function getFailedRules() {\n    var failedRulesPerField = {};\n\n    for (var index = 0; index < internalErrors.length; index++) {\n      var error = internalErrors[index];\n      failedRulesPerField[error.fieldName] = error.failedRules;\n    }\n\n    return failedRulesPerField;\n  };\n\n  var getFailedRulesInField = function getFailedRulesInField(fieldName) {\n    var foundError = internalErrors.find(function (err) {\n      return err.fieldName === fieldName;\n    });\n\n    if (!foundError) {\n      return [];\n    }\n\n    return foundError.failedRules;\n  };\n\n  var getErrorMessages = function getErrorMessages() {\n    var separator = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '\\n';\n    return internalErrors.map(function (err) {\n      return err.messages.join(separator);\n    }).join(separator);\n  };\n\n  var getErrorsInField = function getErrorsInField(fieldName) {\n    var foundError = internalErrors.find(function (err) {\n      return err.fieldName === fieldName;\n    });\n\n    if (!foundError) {\n      return [];\n    }\n\n    return foundError.messages;\n  };\n\n  return {\n    validate: validate,\n    isFormValid: isFormValid,\n    isFieldInError: isFieldInError,\n    getFailedRules: getFailedRules,\n    getFailedRulesInField: getFailedRulesInField,\n    getErrorMessages: getErrorMessages,\n    getErrorsInField: getErrorsInField\n  };\n};\n\nuseValidation.propTypes = {\n  deviceLocale: PropTypes.string,\n  rules: PropTypes.object,\n  messages: PropTypes.object,\n  labels: PropTypes.object\n};\nuseValidation.defaultProps = {\n  deviceLocale: 'en',\n  rules: defaultRules,\n  messages: defaultMessages,\n  labels: {}\n};\nexport default useValidation;","map":{"version":3,"names":["PropTypes","useState","useRef","defaultMessages","defaultRules","useValidation","props","state","deviceLocale","baseRules","rules","messages","labels","errors","internalErrors","setInternalErrors","validate","fields","_resetErrors","key","Object","keys","_checkRules","isFormValid","fieldName","value","required","isRuleFn","isRegExp","RegExp","test","_addError","rule","isFn","name","errMsg","replace","current","filter","err","error","index","indexOf","push","failedRules","isFieldInError","length","getFailedRules","failedRulesPerField","getFailedRulesInField","foundError","find","getErrorMessages","separator","map","join","getErrorsInField","propTypes","string","object","defaultProps"],"sources":["C:/Users/CHRIS/Documents/Kuliah/Semester7/STIMP/UAS/ZIP/uasstimp-master/node_modules/react-native-form-validator/src/use-validation.js"],"sourcesContent":["import PropTypes from 'prop-types';\nimport { useState, useRef } from 'react';\nimport defaultMessages from './messages/defaultMessages';\nimport defaultRules from './rules/defaultRules';\n\nconst useValidation = (props) => {\n  const { state = {} } = props;\n  // array to store error on each fields\n  // ex:\n  // [{ fieldName: \"name\", messages: [\"The field name is required.\"] }]\n  // Retrieve props\n  const deviceLocale = props.deviceLocale || 'en'; // ex: en, fr\n  const baseRules = props.rules || defaultRules; // rules for Validation\n  const messages = props.messages || defaultMessages;\n  const labels = props.labels || {};\n  const errors = useRef([]);\n  const [internalErrors, setInternalErrors] = useState([]);\n\n  /*\n   * Method validate to verify if each children respect the validator rules\n   * Fields example (Array) :\n   * fields = {\n   *  input1: {\n   *    required:true,\n   *     numbers:true,\n   *     maxLength:5\n   *  }\n   *}\n   */\n  const validate = (fields) => {\n    // Reset errors\n    _resetErrors();\n    // Iterate over inner state\n    for (const key of Object.keys(state)) {\n      // Check if child name is equals to fields array set up in parameters\n      const rules = fields[key];\n      if (rules) {\n        // Check rule for current field\n        _checkRules(key, rules, state[key]);\n      }\n    }\n    return isFormValid();\n  };\n\n  // Method to check rules on a spefific field\n  const _checkRules = (fieldName, rules, value) => {\n    if (!value && !rules.required) {\n      return; // if value is empty AND its not required by the rules, no need to check any other rules\n    }\n    for (const key of Object.keys(rules)) {\n      const isRuleFn = typeof baseRules[key] == 'function';\n      const isRegExp = baseRules[key] instanceof RegExp;\n      if ((isRuleFn && !baseRules[key](rules[key], value)) || (isRegExp && !baseRules[key].test(value))) {\n        _addError(fieldName, key, rules[key], isRuleFn);\n      }\n    }\n  };\n\n  // Add error\n  // ex:\n  // [{ fieldName: \"name\", messages: [\"The field name is required.\"] }]\n  const _addError = (fieldName, rule, value, isFn) => {\n    const name = labels[fieldName];\n    value = rule == 'minlength' ? value - 1 : value;\n    const errMsg = messages[deviceLocale][rule].replace('{0}', name || fieldName).replace('{1}', value);\n    let [error] = errors.current.filter((err) => err.fieldName === fieldName);\n    // error already exists\n    if (error) {\n      // Update existing element\n      const index = errors.current.indexOf(error);\n      error.messages.push(errMsg);\n      error.failedRules.push(rule);\n      errors.current[index] = error;\n    } else {\n      // Add new item\n      errors.current.push({\n        fieldName,\n        failedRules: [rule],\n        messages: [errMsg]\n      });\n      setInternalErrors(errors.current);\n    }\n  };\n\n  // Reset error fields\n  const _resetErrors = () => {\n    errors.current = [];\n    setInternalErrors([]);\n  };\n\n  // Method to check if the field is in error\n  const isFieldInError = (fieldName) => {\n    return internalErrors.filter((err) => err.fieldName === fieldName).length > 0;\n  };\n\n  const isFormValid = () => {\n    return errors.current?.length == 0;\n  };\n\n  // Return an object where the keys are the field names and the value is an array with the rules that failed validation\n  const getFailedRules = () => {\n    let failedRulesPerField = {};\n    for (let index = 0; index < internalErrors.length; index++) {\n      let error = internalErrors[index];\n      failedRulesPerField[error.fieldName] = error.failedRules;\n    }\n    return failedRulesPerField;\n  };\n\n  // Return the rules that failed validation for the given field\n  const getFailedRulesInField = (fieldName) => {\n    const foundError = internalErrors.find((err) => err.fieldName === fieldName);\n    if (!foundError) {\n      return [];\n    }\n    return foundError.failedRules;\n  };\n\n  // Concatenate each error messages\n  const getErrorMessages = (separator = '\\n') => {\n    return internalErrors.map((err) => err.messages.join(separator)).join(separator);\n  };\n\n  // Method to return errors on a specific field\n  const getErrorsInField = (fieldName) => {\n    const foundError = internalErrors.find((err) => err.fieldName === fieldName);\n    if (!foundError) {\n      return [];\n    }\n    return foundError.messages;\n  };\n\n  return {\n    validate,\n    isFormValid,\n    isFieldInError,\n    getFailedRules,\n    getFailedRulesInField,\n    getErrorMessages,\n    getErrorsInField\n  };\n};\n\nuseValidation.propTypes = {\n  deviceLocale: PropTypes.string, // Used for language locale\n  rules: PropTypes.object, // rules for validations\n  messages: PropTypes.object, // messages for validation errors\n  labels: PropTypes.object // labels for validation messages\n};\n\nuseValidation.defaultProps = {\n  deviceLocale: 'en',\n  rules: defaultRules,\n  messages: defaultMessages,\n  labels: {}\n};\n\nexport default useValidation;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}