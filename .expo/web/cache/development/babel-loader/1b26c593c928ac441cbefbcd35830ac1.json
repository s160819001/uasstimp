{"ast":null,"code":"import { CodedError } from 'expo-modules-core';\nimport { getContext } from \"../utils/getContext.web\";\nexport default (function (canvas, options) {\n  var _options$originX = options.originX,\n      originX = _options$originX === void 0 ? 0 : _options$originX,\n      _options$originY = options.originY,\n      originY = _options$originY === void 0 ? 0 : _options$originY,\n      _options$width = options.width,\n      width = _options$width === void 0 ? 0 : _options$width,\n      _options$height = options.height,\n      height = _options$height === void 0 ? 0 : _options$height;\n\n  var clamp = function clamp(value, max) {\n    return Math.max(0, Math.min(max, value));\n  };\n\n  width = clamp(width, canvas.width);\n  height = clamp(height, canvas.height);\n  originX = clamp(originX, canvas.width);\n  originY = clamp(originY, canvas.height);\n  width = Math.min(originX + width, canvas.width) - originX;\n  height = Math.min(originY + height, canvas.height) - originY;\n\n  if (width === 0 || height === 0) {\n    throw new CodedError('ERR_IMAGE_MANIPULATOR_CROP', 'Crop size must be greater than 0: ' + JSON.stringify(options, null, 2));\n  }\n\n  var result = document.createElement('canvas');\n  result.width = width;\n  result.height = height;\n  var context = getContext(result);\n  context.drawImage(canvas, originX, originY, width, height, 0, 0, width, height);\n  return result;\n});","map":{"version":3,"mappings":"AAAA,SAASA,UAAT,QAA2B,mBAA3B;AAGA,SAASC,UAAT;AAEA,gBAAe,UAACC,MAAD,EAA4BC,OAA5B,EAA2D;EAExE,uBAA0DA,OAA1D,CAAMC,OAAN;EAAA,IAAMA,OAAN,iCAAgB,CAAhB;EAAA,uBAA0DD,OAA1D,CAAmBE,OAAnB;EAAA,IAAmBA,OAAnB,iCAA6B,CAA7B;EAAA,qBAA0DF,OAA1D,CAAgCG,KAAhC;EAAA,IAAgCA,KAAhC,+BAAwC,CAAxC;EAAA,sBAA0DH,OAA1D,CAA2CI,MAA3C;EAAA,IAA2CA,MAA3C,gCAAoD,CAApD;;EACA,IAAMC,KAAK,GAAG,SAARA,KAAQ,CAACC,KAAD,EAAQC,GAAR;IAAA,OAAgBC,IAAI,CAACD,GAAL,CAAS,CAAT,EAAYC,IAAI,CAACC,GAAL,CAASF,GAAT,EAAcD,KAAd,CAAZ,CAAhB;EAAA,CAAd;;EAEAH,KAAK,GAAGE,KAAK,CAACF,KAAD,EAAQJ,MAAM,CAACI,KAAf,CAAb;EACAC,MAAM,GAAGC,KAAK,CAACD,MAAD,EAASL,MAAM,CAACK,MAAhB,CAAd;EACAH,OAAO,GAAGI,KAAK,CAACJ,OAAD,EAAUF,MAAM,CAACI,KAAjB,CAAf;EACAD,OAAO,GAAGG,KAAK,CAACH,OAAD,EAAUH,MAAM,CAACK,MAAjB,CAAf;EAGAD,KAAK,GAAGK,IAAI,CAACC,GAAL,CAASR,OAAO,GAAGE,KAAnB,EAA0BJ,MAAM,CAACI,KAAjC,IAA0CF,OAAlD;EACAG,MAAM,GAAGI,IAAI,CAACC,GAAL,CAASP,OAAO,GAAGE,MAAnB,EAA2BL,MAAM,CAACK,MAAlC,IAA4CF,OAArD;;EAEA,IAAIC,KAAK,KAAK,CAAV,IAAeC,MAAM,KAAK,CAA9B,EAAiC;IAC/B,MAAM,IAAIP,UAAJ,CACJ,4BADI,EAEJ,uCAAuCa,IAAI,CAACC,SAAL,CAAeX,OAAf,EAAwB,IAAxB,EAA8B,CAA9B,CAFnC,CAAN;EAID;;EAED,IAAMY,MAAM,GAAGC,QAAQ,CAACC,aAAT,CAAuB,QAAvB,CAAf;EACAF,MAAM,CAACT,KAAP,GAAeA,KAAf;EACAS,MAAM,CAACR,MAAP,GAAgBA,MAAhB;EAEA,IAAMW,OAAO,GAAGjB,UAAU,CAACc,MAAD,CAA1B;EACAG,OAAO,CAACC,SAAR,CAAkBjB,MAAlB,EAA0BE,OAA1B,EAAmCC,OAAnC,EAA4CC,KAA5C,EAAmDC,MAAnD,EAA2D,CAA3D,EAA8D,CAA9D,EAAiED,KAAjE,EAAwEC,MAAxE;EAEA,OAAOQ,MAAP;AACD,CA7BD","names":["CodedError","getContext","canvas","options","originX","originY","width","height","clamp","value","max","Math","min","JSON","stringify","result","document","createElement","context","drawImage"],"sourceRoot":"","sources":["../../src/actions/CropAction.web.ts"],"sourcesContent":["import { CodedError } from 'expo-modules-core';\n\nimport { ActionCrop } from '../ImageManipulator.types';\nimport { getContext } from '../utils/getContext.web';\n\nexport default (canvas: HTMLCanvasElement, options: ActionCrop['crop']) => {\n  // ensure values are defined.\n  let { originX = 0, originY = 0, width = 0, height = 0 } = options;\n  const clamp = (value, max) => Math.max(0, Math.min(max, value));\n  // lock within bounds.\n  width = clamp(width, canvas.width);\n  height = clamp(height, canvas.height);\n  originX = clamp(originX, canvas.width);\n  originY = clamp(originY, canvas.height);\n\n  // lock sum of crop.\n  width = Math.min(originX + width, canvas.width) - originX;\n  height = Math.min(originY + height, canvas.height) - originY;\n\n  if (width === 0 || height === 0) {\n    throw new CodedError(\n      'ERR_IMAGE_MANIPULATOR_CROP',\n      'Crop size must be greater than 0: ' + JSON.stringify(options, null, 2)\n    );\n  }\n\n  const result = document.createElement('canvas');\n  result.width = width;\n  result.height = height;\n\n  const context = getContext(result);\n  context.drawImage(canvas, originX, originY, width, height, 0, 0, width, height);\n\n  return result;\n};\n"]},"metadata":{},"sourceType":"module"}