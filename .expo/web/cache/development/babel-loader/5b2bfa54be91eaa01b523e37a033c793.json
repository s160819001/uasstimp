{"ast":null,"code":"import { getContext } from \"../utils/getContext.web\";\n\nfunction sizeFromAngle(width, height, angle) {\n  var radians = angle * Math.PI / 180;\n  var c = Math.cos(radians);\n  var s = Math.sin(radians);\n\n  if (s < 0) {\n    s = -s;\n  }\n\n  if (c < 0) {\n    c = -c;\n  }\n\n  return {\n    width: height * s + width * c,\n    height: height * c + width * s\n  };\n}\n\nexport default (function (canvas, degrees) {\n  var _sizeFromAngle = sizeFromAngle(canvas.width, canvas.height, degrees),\n      width = _sizeFromAngle.width,\n      height = _sizeFromAngle.height;\n\n  var result = document.createElement('canvas');\n  result.width = width;\n  result.height = height;\n  var context = getContext(result);\n  context.translate(result.width / 2, result.height / 2);\n  var radians = degrees * Math.PI / 180;\n  context.rotate(radians);\n  context.drawImage(canvas, -canvas.width / 2, -canvas.height / 2, canvas.width, canvas.height);\n  return result;\n});","map":{"version":3,"mappings":"AACA,SAASA,UAAT;;AAEA,SAASC,aAAT,CACEC,KADF,EAEEC,MAFF,EAGEC,KAHF,EAGe;EAEb,IAAMC,OAAO,GAAID,KAAK,GAAGE,IAAI,CAACC,EAAd,GAAoB,GAApC;EACA,IAAIC,CAAC,GAAGF,IAAI,CAACG,GAAL,CAASJ,OAAT,CAAR;EACA,IAAIK,CAAC,GAAGJ,IAAI,CAACK,GAAL,CAASN,OAAT,CAAR;;EACA,IAAIK,CAAC,GAAG,CAAR,EAAW;IACTA,CAAC,GAAG,CAACA,CAAL;EACD;;EACD,IAAIF,CAAC,GAAG,CAAR,EAAW;IACTA,CAAC,GAAG,CAACA,CAAL;EACD;;EACD,OAAO;IAAEN,KAAK,EAAEC,MAAM,GAAGO,CAAT,GAAaR,KAAK,GAAGM,CAA9B;IAAiCL,MAAM,EAAEA,MAAM,GAAGK,CAAT,GAAaN,KAAK,GAAGQ;EAA9D,CAAP;AACD;;AAED,gBAAe,UAACE,MAAD,EAA4BC,OAA5B,EAA+D;EAC5E,qBAA0BZ,aAAa,CAACW,MAAM,CAACV,KAAR,EAAeU,MAAM,CAACT,MAAtB,EAA8BU,OAA9B,CAAvC;EAAA,IAAQX,KAAR,kBAAQA,KAAR;EAAA,IAAeC,MAAf,kBAAeA,MAAf;;EAEA,IAAMW,MAAM,GAAGC,QAAQ,CAACC,aAAT,CAAuB,QAAvB,CAAf;EACAF,MAAM,CAACZ,KAAP,GAAeA,KAAf;EACAY,MAAM,CAACX,MAAP,GAAgBA,MAAhB;EAEA,IAAMc,OAAO,GAAGjB,UAAU,CAACc,MAAD,CAA1B;EAGAG,OAAO,CAACC,SAAR,CAAkBJ,MAAM,CAACZ,KAAP,GAAe,CAAjC,EAAoCY,MAAM,CAACX,MAAP,GAAgB,CAApD;EAGA,IAAME,OAAO,GAAIQ,OAAO,GAAGP,IAAI,CAACC,EAAhB,GAAsB,GAAtC;EACAU,OAAO,CAACE,MAAR,CAAed,OAAf;EAGAY,OAAO,CAACG,SAAR,CAAkBR,MAAlB,EAA0B,CAACA,MAAM,CAACV,KAAR,GAAgB,CAA1C,EAA6C,CAACU,MAAM,CAACT,MAAR,GAAiB,CAA9D,EAAiES,MAAM,CAACV,KAAxE,EAA+EU,MAAM,CAACT,MAAtF;EAEA,OAAOW,MAAP;AACD,CApBD","names":["getContext","sizeFromAngle","width","height","angle","radians","Math","PI","c","cos","s","sin","canvas","degrees","result","document","createElement","context","translate","rotate","drawImage"],"sourceRoot":"","sources":["../../src/actions/RotateAction.web.ts"],"sourcesContent":["import { ActionRotate } from '../ImageManipulator.types';\nimport { getContext } from '../utils/getContext.web';\n\nfunction sizeFromAngle(\n  width: number,\n  height: number,\n  angle: number\n): { width: number; height: number } {\n  const radians = (angle * Math.PI) / 180;\n  let c = Math.cos(radians);\n  let s = Math.sin(radians);\n  if (s < 0) {\n    s = -s;\n  }\n  if (c < 0) {\n    c = -c;\n  }\n  return { width: height * s + width * c, height: height * c + width * s };\n}\n\nexport default (canvas: HTMLCanvasElement, degrees: ActionRotate['rotate']) => {\n  const { width, height } = sizeFromAngle(canvas.width, canvas.height, degrees);\n\n  const result = document.createElement('canvas');\n  result.width = width;\n  result.height = height;\n\n  const context = getContext(result);\n\n  // Set the origin to the center of the image\n  context.translate(result.width / 2, result.height / 2);\n\n  // Rotate the canvas around the origin\n  const radians = (degrees * Math.PI) / 180;\n  context.rotate(radians);\n\n  // Draw the image\n  context.drawImage(canvas, -canvas.width / 2, -canvas.height / 2, canvas.width, canvas.height);\n\n  return result;\n};\n"]},"metadata":{},"sourceType":"module"}