{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nvar _excluded = [\"format\"];\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport { UnavailabilityError } from 'expo-modules-core';\nimport ExpoImageManipulator from \"./ExpoImageManipulator\";\nimport { SaveFormat } from \"./ImageManipulator.types\";\nimport { validateArguments } from \"./validators\";\nexport function manipulateAsync(_x) {\n  return _manipulateAsync.apply(this, arguments);\n}\n\nfunction _manipulateAsync() {\n  _manipulateAsync = _asyncToGenerator(function* (uri) {\n    var actions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n    var saveOptions = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n    if (!ExpoImageManipulator.manipulateAsync) {\n      throw new UnavailabilityError('ImageManipulator', 'manipulateAsync');\n    }\n\n    validateArguments(uri, actions, saveOptions);\n\n    var _saveOptions$format = saveOptions.format,\n        format = _saveOptions$format === void 0 ? SaveFormat.JPEG : _saveOptions$format,\n        rest = _objectWithoutProperties(saveOptions, _excluded);\n\n    return yield ExpoImageManipulator.manipulateAsync(uri, actions, _objectSpread({\n      format: format\n    }, rest));\n  });\n  return _manipulateAsync.apply(this, arguments);\n}\n\nexport * from \"./ImageManipulator.types\";","map":{"version":3,"mappings":";;;;;;;;;AAAA,SAASA,mBAAT,QAAoC,mBAApC;AAEA,OAAOC,oBAAP;AACA,SAA8BC,UAA9B;AACA,SAASC,iBAAT;AAcA,gBAAsBC,eAAtB;EAAA;AAAA;;;uCAAO,WACLC,GADK,EAGwB;IAAA,IAD7BC,OAC6B,uEADT,EACS;IAAA,IAA7BC,WAA6B,uEAAF,EAAE;;IAE7B,IAAI,CAACN,oBAAoB,CAACG,eAA1B,EAA2C;MACzC,MAAM,IAAIJ,mBAAJ,CAAwB,kBAAxB,EAA4C,iBAA5C,CAAN;IACD;;IAEDG,iBAAiB,CAACE,GAAD,EAAMC,OAAN,EAAeC,WAAf,CAAjB;;IAEA,0BAA8CA,WAA9C,CAAQC,MAAR;IAAA,IAAQA,MAAR,oCAAiBN,UAAU,CAACO,IAA5B;IAAA,IAAqCC,IAArC,4BAA8CH,WAA9C;;IACA,aAAaN,oBAAoB,CAACG,eAArB,CAAqCC,GAArC,EAA0CC,OAA1C;MAAqDE,MAAM,EAANA;IAArD,GAAgEE,IAAhE,EAAb;EACD,C;;;;AAED","names":["UnavailabilityError","ExpoImageManipulator","SaveFormat","validateArguments","manipulateAsync","uri","actions","saveOptions","format","JPEG","rest"],"sourceRoot":"","sources":["../src/ImageManipulator.ts"],"sourcesContent":["import { UnavailabilityError } from 'expo-modules-core';\n\nimport ExpoImageManipulator from './ExpoImageManipulator';\nimport { Action, ImageResult, SaveFormat, SaveOptions } from './ImageManipulator.types';\nimport { validateArguments } from './validators';\n\n// @needsAudit\n/**\n * Manipulate the image provided via `uri`. Available modifications are rotating, flipping (mirroring),\n * resizing and cropping. Each invocation results in a new file. With one invocation you can provide\n * a set of actions to perform over the image. Overwriting the source file would not have an effect\n * in displaying the result as images are cached.\n * @param uri URI of the file to manipulate. Should be on the local file system or a base64 data URI.\n * @param actions An array of objects representing manipulation options. Each object should have\n * __only one__ of the keys that corresponds to specific transformation.\n * @param saveOptions A map defining how modified image should be saved.\n * @return Promise which fulfils with [`ImageResult`](#imageresult) object.\n */\nexport async function manipulateAsync(\n  uri: string,\n  actions: Action[] = [],\n  saveOptions: SaveOptions = {}\n): Promise<ImageResult> {\n  if (!ExpoImageManipulator.manipulateAsync) {\n    throw new UnavailabilityError('ImageManipulator', 'manipulateAsync');\n  }\n\n  validateArguments(uri, actions, saveOptions);\n\n  const { format = SaveFormat.JPEG, ...rest } = saveOptions;\n  return await ExpoImageManipulator.manipulateAsync(uri, actions, { format, ...rest });\n}\n\nexport * from './ImageManipulator.types';\n"]},"metadata":{},"sourceType":"module"}