{"ast":null,"code":"import { FlipType, SaveFormat } from \"./ImageManipulator.types\";\nexport function validateArguments(uri, actions, saveOptions) {\n  validateUri(uri);\n  validateActions(actions);\n  validateSaveOptions(saveOptions);\n}\nexport function validateUri(uri) {\n  if (!(typeof uri === 'string')) {\n    throw new TypeError('The \"uri\" argument must be a string');\n  }\n}\nexport function validateActions(actions) {\n  if (!Array.isArray(actions)) {\n    throw new TypeError('The \"actions\" argument must be an array');\n  }\n\n  for (var action of actions) {\n    if (typeof action !== 'object' || action === null) {\n      throw new TypeError('Action must be an object');\n    }\n\n    var supportedActionTypes = ['crop', 'flip', 'rotate', 'resize'];\n    var actionKeys = Object.keys(action);\n\n    if (actionKeys.length !== 1) {\n      throw new TypeError(\"Single action must contain exactly one transformation: \" + supportedActionTypes.join(', '));\n    }\n\n    var actionType = actionKeys[0];\n\n    if (!supportedActionTypes.includes(actionType)) {\n      throw new TypeError(\"Unsupported action type: \" + actionType);\n    }\n\n    if (actionType === 'crop') {\n      validateCropAction(action);\n    } else if (actionType === 'flip') {\n      validateFlipAction(action);\n    } else if (actionType === 'rotate') {\n      validateRotateAction(action);\n    } else if (actionType === 'resize') {\n      validateResizeAction(action);\n    }\n  }\n}\n\nfunction validateCropAction(action) {\n  var isValid = typeof action.crop === 'object' && action.crop !== null && typeof action.crop.originX === 'number' && typeof action.crop.originY === 'number' && typeof action.crop.width === 'number' && typeof action.crop.height === 'number';\n\n  if (!isValid) {\n    throw new TypeError('Crop action must be an object of shape { originX: number; originY: number; width: number; height: number }');\n  }\n}\n\nfunction validateFlipAction(action) {\n  if (typeof action.flip !== 'string' || ![FlipType.Horizontal, FlipType.Vertical].includes(action.flip)) {\n    throw new TypeError(\"Unsupported flip type: \" + action.flip);\n  }\n}\n\nfunction validateRotateAction(action) {\n  if (typeof action.rotate !== 'number') {\n    throw new TypeError('Rotation must be a number');\n  }\n}\n\nfunction validateResizeAction(action) {\n  var isValid = typeof action.resize === 'object' && action.resize !== null && (typeof action.resize.width === 'number' || typeof action.resize.width === 'undefined') && (typeof action.resize.height === 'number' || typeof action.resize.height === 'undefined');\n\n  if (!isValid) {\n    throw new TypeError('Resize action must be an object of shape { width?: number; height?: number }');\n  }\n}\n\nexport function validateSaveOptions(_ref) {\n  var base64 = _ref.base64,\n      compress = _ref.compress,\n      format = _ref.format;\n\n  if (base64 !== undefined && typeof base64 !== 'boolean') {\n    throw new TypeError('The \"base64\" argument must be a boolean');\n  }\n\n  if (compress !== undefined) {\n    if (typeof compress !== 'number') {\n      throw new TypeError('The \"compress\" argument must be a number');\n    }\n\n    if (compress < 0 || compress > 1) {\n      throw new TypeError('The \"compress\" argument must be a number between 0 and 1');\n    }\n  }\n\n  var allowedFormats = [SaveFormat.JPEG, SaveFormat.PNG, SaveFormat.WEBP];\n\n  if (format !== undefined && !allowedFormats.includes(format)) {\n    throw new TypeError(\"The \\\"format\\\" argument must be one of: \" + allowedFormats.join(', '));\n  }\n}","map":{"version":3,"mappings":"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","names":["FlipType","SaveFormat","validateArguments","uri","actions","saveOptions","validateUri","validateActions","validateSaveOptions","TypeError","Array","isArray","action","supportedActionTypes","actionKeys","Object","keys","length","join","actionType","includes","validateCropAction","validateFlipAction","validateRotateAction","validateResizeAction","isValid","crop","originX","originY","width","height","flip","Horizontal","Vertical","rotate","resize","base64","compress","format","undefined","allowedFormats","JPEG","PNG","WEBP"],"sourceRoot":"","sources":["../src/validators.ts"],"sourcesContent":["import {\n  Action,\n  ActionCrop,\n  ActionFlip,\n  ActionResize,\n  ActionRotate,\n  FlipType,\n  SaveFormat,\n  SaveOptions,\n} from './ImageManipulator.types';\n\nexport function validateArguments(uri: string, actions: Action[], saveOptions: SaveOptions) {\n  validateUri(uri);\n  validateActions(actions);\n  validateSaveOptions(saveOptions);\n}\n\nexport function validateUri(uri: string): void {\n  if (!(typeof uri === 'string')) {\n    throw new TypeError('The \"uri\" argument must be a string');\n  }\n}\n\nexport function validateActions(actions: Action[]): void {\n  if (!Array.isArray(actions)) {\n    throw new TypeError('The \"actions\" argument must be an array');\n  }\n  for (const action of actions) {\n    if (typeof action !== 'object' || action === null) {\n      throw new TypeError('Action must be an object');\n    }\n    const supportedActionTypes = ['crop', 'flip', 'rotate', 'resize'];\n    const actionKeys = Object.keys(action);\n    if (actionKeys.length !== 1) {\n      throw new TypeError(\n        `Single action must contain exactly one transformation: ${supportedActionTypes.join(', ')}`\n      );\n    }\n    const actionType = actionKeys[0];\n    if (!supportedActionTypes.includes(actionType)) {\n      throw new TypeError(`Unsupported action type: ${actionType}`);\n    }\n\n    if (actionType === 'crop') {\n      validateCropAction(action as ActionCrop);\n    } else if (actionType === 'flip') {\n      validateFlipAction(action as ActionFlip);\n    } else if (actionType === 'rotate') {\n      validateRotateAction(action as ActionRotate);\n    } else if (actionType === 'resize') {\n      validateResizeAction(action as ActionResize);\n    }\n  }\n}\n\nfunction validateCropAction(action: ActionCrop): void {\n  const isValid =\n    typeof action.crop === 'object' &&\n    action.crop !== null &&\n    typeof action.crop.originX === 'number' &&\n    typeof action.crop.originY === 'number' &&\n    typeof action.crop.width === 'number' &&\n    typeof action.crop.height === 'number';\n  if (!isValid) {\n    throw new TypeError(\n      'Crop action must be an object of shape { originX: number; originY: number; width: number; height: number }'\n    );\n  }\n}\n\nfunction validateFlipAction(action: ActionFlip): void {\n  if (\n    typeof action.flip !== 'string' ||\n    ![FlipType.Horizontal, FlipType.Vertical].includes(action.flip)\n  ) {\n    throw new TypeError(`Unsupported flip type: ${action.flip}`);\n  }\n}\n\nfunction validateRotateAction(action: ActionRotate): void {\n  if (typeof action.rotate !== 'number') {\n    throw new TypeError('Rotation must be a number');\n  }\n}\n\nfunction validateResizeAction(action: ActionResize): void {\n  const isValid =\n    typeof action.resize === 'object' &&\n    action.resize !== null &&\n    (typeof action.resize.width === 'number' || typeof action.resize.width === 'undefined') &&\n    (typeof action.resize.height === 'number' || typeof action.resize.height === 'undefined');\n  if (!isValid) {\n    throw new TypeError(\n      'Resize action must be an object of shape { width?: number; height?: number }'\n    );\n  }\n}\n\nexport function validateSaveOptions({ base64, compress, format }: SaveOptions): void {\n  if (base64 !== undefined && typeof base64 !== 'boolean') {\n    throw new TypeError('The \"base64\" argument must be a boolean');\n  }\n  if (compress !== undefined) {\n    if (typeof compress !== 'number') {\n      throw new TypeError('The \"compress\" argument must be a number');\n    }\n    if (compress < 0 || compress > 1) {\n      throw new TypeError('The \"compress\" argument must be a number between 0 and 1');\n    }\n  }\n  const allowedFormats = [SaveFormat.JPEG, SaveFormat.PNG, SaveFormat.WEBP];\n  if (format !== undefined && !allowedFormats.includes(format)) {\n    throw new TypeError(`The \"format\" argument must be one of: ${allowedFormats.join(', ')}`);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}